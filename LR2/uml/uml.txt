@startuml
skinparam classAttributeIconSize 0

abstract class BasicStudent {
	-- Поля --
	{field} # id
	{field} # git
	
	-- Публичные методы класса --
	{static} + read_from_txt(file_path)
	{static} + write_to_txt(file_path, stud_list)
	
	-- Защищённые методы класса --
	
	{static} # string_ctor(str)
	{static} # hash_from_fields(fields)
	{static} # contact_type(contact)
	{static} # join_with_comma(str_arr)
	{static} # pretty_represent(field_prompt, value)

	{static} # name_correct?(name)
	{static} # phone_correct?(phone)
	{static} # telegram_correct?(tg)
	{static} # email_correct?(email)
	{static} # git_correct?(git)
	{static} # surname_in_correct?(surname_initials)
	{static} # contact_correct?(contact)
	
	-- Публичные методы объекта --
	
	{method} + git_exists?()
	{method} + contact_exists?()
	{method} + validate()
	{method} + inspect()
	
	-- Защищённые методы объекта --
	
	{method} # inspect_impl(fields)
	
	-- Итератор --
	{method} + each{|field, value|}
}

class Student {
	-- Поля --
	{field} + id
	{field} + surname
	{field} + first_name
	{field} + mid_name
	{field} + phone
	{field} + telegram
	{field} + email
	{field} + git
	
	-- Конструкторы --
	
	{static} + initialize(surname:, first_name:, mid_name:, id:nil, phone:nil, telegram:nil, email:nil, git:nil)
	
	-- Публичные методы класса --

	{static} + all_fields()
	
	-- Приватные методы класса --
	{static} - preprocess_phone(value)
	
	-- Методы объекта --
	
	{method} + surname_initials()
	{method} + contact()
	{method} + get_info()
	{method} + set_contacts(phone: nil, telegram: nil, email: nil)
	{method} + to_s()
	
}

class StudentShort {
	-- Геттеры --
	{field} + id
	{field} + surname_initials
	{field} + git
	{field} + contact
	
	-- Сеттеры --
	
	{method} - id=
	{method} - surname_initials=
	{method} - git=
	{method} - contact=

	-- Конструкторы --
	
	{static} - initialize(id:, surname_initials:, git:, contact:)
	
	{static} + id_string_ctor(id, str)
	{static} + student_ctor(student)
	
	-- Статические методы --
	
	{static} + all_fields()
	
	-- Методы объекта --
	
	{method} + to_s()
}

class DataTable {
	{field} - array
	
	-- Конструктор --
	{static} + initialize(array)
	
	-- Публичные методы --
	{method} + get(x, y)
	{method} + cols()
	{method} + rows()
	
	-- Приватные методы класса --
	{static} - check_array(arr)
	{static} - check_subarrays_size_equality(arr)
}

abstract class DataList { 
	{field} # array
	
	-- Конструктор --
	{static} # initialize(arr)
	
	-- Публичные методы --
	{method} + select(num)
	{method} + unselect()
	{method} + get_selected()
	
	-- Шаблонные методы --
	{method} + get_data()
	{static} + get_names()
	
	-- МЕТОДЫ КОТОРЫЕ ОЧЕНЬ НАДО РЕАЛИЗОВАТЬ В ПОТОМКАХ --
	{method} - get_data_impl()
	{static} - get_names_impl()
	
	-- Приватные методы класса --
	{static} - elements_equal_to?(array, el)
	
	-- Приватные методы объекта --
	{method} - check_array(arr)
}

class DataListStudentShort {
	-- Публичные поля --
	{field} + view
	
	-- Публичные методы --
	{method} + notify()

	{method} - get_data_impl()
	{static} - get_names_impl()
}


class StudentsList {
	-- Конструктор --
	{static} + initialize()
	
	-- Методы --
	{method} + read_all_objects(reader)
	{method} + write_all_objects(writer)
	{method} + add_obj(obj)
	{method} + upd_obj(id, obj)
	{method} + del_obj(id)
	{method} + get_k_n_student_short_list(k, n)
	{method} + sort_si()
	{method} + get_students_count()
	
	-- Приватные методы --
	{method} - get_index(id)
}

abstract BasicReaderWriter {
	{method} + read_objects()
	{method} + write_objects(hashes_array)
}

class DBReaderWriter {
	-- Поля --
	{field} - db_table
	{field} - db_client
	
	-- Конструктор --
	{static} + initialize(table:, db:)
	
	-- Методы --
	{method} + read_objects_impl()
	{method} + write_objects_impl(hashes_array)
}

abstract BasicFileReaderWriter {
	-- Поля --
	{field} - file_path
	
	-- Конструктор --
	{static} # initialize(file_path)
	
	-- Методы --
	{method} + read_objects_impl()
	{method} + write_objects_impl(hashes_array)
	
	-- Абстрактные методы класса --
	{static} - parse(str)
	{static} - esrap(data_array)
}

class TXTReaderWriter {
	-- Переопределённые методы --
	{static} - parse(str)
	{static} - esrap(data_array)
}

class JSONReaderWriter {
	-- Переопределённые методы --
	{static} - parse(str)
	{static} - esrap(data_array)
}

class YAMLReaderWriter {
	-- Переопределённые методы --
	{static} - parse(str)
	{static} - esrap(data_array)
}

interface Enumerable {}

interface CheckCorrectnessWriter {
	{method} + checked_writer(field, correct, nil_expected: true, preprocess: lambda {|x| x})
}

interface Parser {
	{static} + parse(str)
	{static} + unparse(data_hash)
}

class DBSingleton {
	-- Поля экземпляра класса --
	{field} - @instance
	
	-- Методы класса --
	{static} + instance
	
	-- Геттер --
	{method} + db_client

	-- Сеттер --
	{method} - db_client
}

class StudentMainWindow {
	-- Публичные геттеры --
	{field} + add_button
	{field} + chg_button
	{field} + del_button
	{field} + upd_button
	{field} + go_left_button
	{field} + go_right_button
	{field} + page_count_label
	{field} + cur_page_label
	{field} + table
	{field} + tabBook
	
	-- Публичные методы --
	{method} + create()
	{method} + set_table_headers(array)
	
	-- Конструктор --
	{method} + initialize(app)
	
	-- Приватные сеттеры --
	{field} - add_button
	{field} - chg_button
	{field} - del_button
	{field} - upd_button
	{field} - go_left_button
	{field} - go_right_button
	{field} - page_count_label
	{field} - cur_page_label
	{field} - table
	{field} - tabBook
	
	-- Приватные методы --
	{method} - handle_list_box_command(index, listbox, field)
	{method} - add_listboxed_field(frame, presence_of, field_name, field_width)
	{method} - add_name_field(frame)
	{method} - add_git_field(frame)
	{method} - add_email_field(frame)
	{method} - add_phone_field(frame)
	{method} - add_tg_field(frame)
	{method} - add_table(frame)
	{method} - add_crud_buttons(frame)
	{method} - add_lcr_buttons(frame)
}

class StudentListView {
	-- Конструктор --
	{method} + initialize
	
	-- Публичные методы --
	{method} + set_table_params(column_names, whole_entities_count)
	{method} + set_table_data(data_table)
	
	-- Приватные поля --
	{field} - window
	{field} - controller
	
	-- Приватные методы --
	{method} - set_table_handlers()
	{method} - set_tab_book_handler()
	{method} - sort()
	{method} - set_lcr_handlers()
	{method} - erase_table()
	{method} - refresh(reload: false)
}

class StudentListController {
	-- Публичные геттеры --
	{field} + cur_page
	{field} + page_count
	
	-- Конструктор --
	{method} + initialize(view)
	
	-- Публичные методы --
	{method} + next_page
	{method} + prev_page
	{method} + refresh_data(reload: false)
	{method} + sort
 	
	-- Приватные сеттеры --
	{field} - cur_page
	
	-- Приватные методы --
	{method} - default_readerwriter
	{method} - table_row_count
	{method} - last_page?(page)
	{method} - first_page?(page)
	{method} - load_list(readerwriter)
}

BasicStudent ..|> CheckCorrectnessWriter
DataTable ..|> CheckCorrectnessWriter
DataList ..|> CheckCorrectnessWriter

BasicStudent ..|> Enumerable
BasicStudent ..|> Parser

Student --|> BasicStudent
StudentShort --|> BasicStudent
StudentShort ..> Student 

DataListStudentShort --|> DataList
DataList ..> DataTable

StudentsList ..> Student
StudentsList ..> DataList
StudentsList ..> BasicReaderWriter

DBReaderWriter --|> BasicReaderWriter
BasicFileReaderWriter --|> BasicReaderWriter

TXTReaderWriter --|> BasicFileReaderWriter
TXTReaderWriter ..> Parser

JSONReaderWriter --|> BasicFileReaderWriter
YAMLReaderWriter --|> BasicFileReaderWriter

StudentMainWindow --|> FXWindow
StudentListView --> StudentMainWindow

StudentListView --> StudentListController
StudentListController --> StudentListView

StudentListController --> StudentsList
StudentListController --> DataListStudentShort

DataListStudentShort --> StudentListView
@enduml